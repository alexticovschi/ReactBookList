import React, { Component } from 'react';
import { connect } from 'react-redux'; // react-redux is the glue between React and Redux
import { selectBook } from '../actions/index';
// * bindActionCreator function is used to make sure that the action that is generated by the 
//   action creator ends up flowing throught all the different reducers
import { bindActionCreators } from 'redux'; 


class BookList extends Component {
  // renderList is going to map over an array of books and ...
  // for each book in the array, create a <li> that contains the book title
  // whenever a book is clicked, call this.props.selectBook and pass it the book
  renderList() {
    return this.props.books.map((book) => {
      return (
        <li 
          key={book.title} 
          onClick={() => this.props.selectBook(book)}
          className="list-group-item">
          {book.title}
        </li>
      )
    })
  }


  render() {
    return (
      // create a ul and then call a helper function called renderList
      <ul className="list-group col-sm-4">
        {this.renderList()}
      </ul>
    )
  }
}

// The state contains an array of books and the active book
// Takes the application's state as an argument and whatever is  
// returned will show up as props inside of BookList
function mapStateToProps(state) {
  return {
    books: state.books
  }
}

// Anything returned from this function will end up as props on the BookList container
function mapDispatchToProps(dispatch) {
  // Whenever selectBook is called, the result should be passed to all of our reducers
  return bindActionCreators({ selectBook: selectBook }, dispatch);
}


// Component - a container that is aware of the state that is contained by Redux
// connect takes a function and a component and produces a container
// Promote BookList from a component to a container - it needs to know about this new dispatch
// method, selectBook. Make it available as a prop.
export default connect(mapStateToProps, mapDispatchToProps)(BookList);
